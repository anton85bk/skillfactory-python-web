#!/usr/bin/python3

" Программа содержащая функции и шаблоны по генерации HTML-файла "

from datetime import date
from horoscope import generate_prophecies
import horoscope

## generate HTML code:

# Общий шаблон для HTML-файлов
generic_page_template = """<!-- generated by "universal_generator.py" -->
<html>
<head>
%s
</head>
<body>
%s
</body>
</html>"""

# Универсальный шаблон для содержимого страниц
generic_page_data_template = """
\t<!-- generic_page_data_template -->
%s
"""

# Шаблон для содержимого страниц с внедрённой картинкой
about_page_data_template = """
\t<!-- about_page_data_template -->
\t<img src="https://e1.am.phnx.pics/phnx/tv/95/65/29/956529/bed3e9c36aa1bd8fede423d8a6bdb054-quality_70Xresize_crop_1Xallow_enlarge_0Xw_750Xh_463.jpg" width=100 height=100 />
%s
"""

def fill_template_with_data(page_title: str, top_header: str,
                            page_template: str, page_data: str,
                            bottom_link_url: str, bottom_link_name: str) -> str:
    " Функция вернёт готовый HTML-код, заполненный входными данными "
    global generic_page_template
    return generic_page_template % (
        generate_head(page_title),
        generate_body(
            top_header,
            page_template,
            page_data,
            bottom_link_url,
            bottom_link_name
        )
    )

def generate_head(page_title: str) -> str:
    " Функция заполняет HEAD-секцию итогового HTML-кода "
    result = "\t<!-- generated head -->\n"
    result += "\t<meta charset='utf-8'>\n"
    result += "\t<title>" + page_title + "</title>\n"
    return result

def generate_body(top_header: str, page_template: str,
                  page_data: str, bottom_link_url: str,
                  bottom_link_name: str) -> str:
    " Функция заполняет BODY-секцию итогового HTML-кода "
    result = "\t<!-- generated body -->\n"
    result += generate_top(top_header)
    result += generate_middle(page_template, page_data)
    result += generate_bottom(bottom_link_url, bottom_link_name)
    return result

def generate_top(top_header: str) -> str:
    " Функция оформляет верхнюю часть BODY-секции для generate_body()"
    result = "\t<!-- TOP -->\n"
    result += "\t<h1>" + top_header + "</h1>\n"
    return result

def generate_middle(page_template: str, page_data: str) -> str:
    " Функция оформляет центральную часть BODY-секции для generate_body()"
    return page_template % "".join(page_data)

def generate_bottom(bottom_link_url: str, bottom_link_name: str) -> str:
    " Функция оформляет нижнюю часть BODY-секции для generate_body()"
    result = "\t<!-- BOTTOM -->\n"
    result += "\t<hr>\n"
    result += '\t<a href="' + bottom_link_url + '">' + bottom_link_name + "</a>"
    return result

def save_file(data: str, file_name: str) -> str:
    " Сохранить указанное содержимое (data) в виде файла с именем file_name"
    with open(file_name, "w") as file_to_save:
        print(data, file=file_to_save)

def add_p_tag(filled_list: list) -> list:
    " Обернуть элементы списка тэгами <p> "
    return ["\t<p>" + x + "</p>\n" for x in filled_list]

## generate content:

def generate_for_about_lists() -> list:
    " КОНТЕНТ: сгенерировать заполненные  списки для about.html: "
    result = []
    list_data = {
        "Времена дня" : horoscope.times,
        "Глаголы" : horoscope.advices,
        "Ожидания" : horoscope.promises
    }

    result.append("\t<ol>\n")

    for ol_element in list_data:
        result.append("\t\t<li>" + ol_element.capitalize() + ":\n")
        result.append("\t\t<ul>\n")
        for ul_element in list_data[ol_element]:
            result.append("\t\t\t<li>" + ul_element.capitalize() + "\n")
        result.append("\t\t</ul>\n")
    result.append("\t</ol>\n")

    return result

## sample run:
if __name__ == "__main__":

    print("generating index.html")
    index_html = fill_template_with_data(
        page_title="Гороскоп",
        top_header="Ваши предсказания на " + str(date.today()),
        page_template=generic_page_data_template,
        page_data=add_p_tag(generate_prophecies(total_num=3, num_sentences=4)),
        bottom_link_url="about.html",
        bottom_link_name="О реализации"
    )
    save_file(index_html, "index.html")

    print("generating about.html")
    about_html = fill_template_with_data(
        page_title="Гороскоп",
        top_header="О чем все это",
        page_template=about_page_data_template,
        page_data=generate_for_about_lists(),
        bottom_link_url="index.html",
        bottom_link_name="На главную"
    )
    save_file(about_html, "about.html")
